version: '3.8'

services:
  # PostgreSQL Database
  charitypay-db:
    image: postgres:15-alpine
    container_name: charitypay-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: charitypay
      POSTGRES_USER: charitypay_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-charitypay_password_2024}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - charitypay-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U charitypay_user -d charitypay"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  charitypay-redis:
    image: redis:7-alpine
    container_name: charitypay-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - charitypay-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2024}

  # CharityPay API
  charitypay-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: charitypay-api
    restart: unless-stopped
    ports:
      - "8081:80"
      - "8444:443"
    environment:
      # Database
      ConnectionStrings__DefaultConnection: "Host=charitypay-db;Port=5432;Database=charitypay;Username=charitypay_user;Password=${DB_PASSWORD:-charitypay_password_2024};SSL Mode=Prefer;Trust Server Certificate=true"
      
      # Redis
      ConnectionStrings__Redis: "charitypay-redis:6379,password=${REDIS_PASSWORD:-redis_password_2024}"
      
      # JWT Configuration
      JwtSettings__Secret: "${JWT_SECRET:-your-super-secret-jwt-key-that-is-at-least-32-characters-long}"
      JwtSettings__Issuer: "CharityPay"
      JwtSettings__Audience: "CharityPay-Users"
      JwtSettings__ExpirationInMinutes: "1440"
      
      # Fiserv Configuration
      FiservSettings__ApiKey: "${FISERV_API_KEY:-sandbox-api-key}"
      FiservSettings__ApiSecret: "${FISERV_API_SECRET:-sandbox-api-secret}"
      FiservSettings__BaseUrl: "${FISERV_BASE_URL:-https://cert.api.firstdata.com}"
      FiservSettings__StoreId: "${FISERV_STORE_ID:-sandbox-store-id}"
      FiservSettings__WebhookSecret: "${FISERV_WEBHOOK_SECRET:-webhook-secret}"
      
      # Application URLs
      ApplicationUrls__WebhookBaseUrl: "${WEBHOOK_BASE_URL:-http://localhost:8080}"
      ApplicationUrls__FrontendBaseUrl: "${FRONTEND_BASE_URL:-http://localhost:3000}"
      
      # Environment
      ASPNETCORE_ENVIRONMENT: "${ASPNETCORE_ENVIRONMENT:-Production}"
      ASPNETCORE_URLS: "http://+:80"
      
      # Logging
      Serilog__MinimumLevel__Default: "Information"
      Serilog__MinimumLevel__Override__Microsoft: "Warning"
      Serilog__MinimumLevel__Override__System: "Warning"
      
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - charitypay-network
    depends_on:
      charitypay-db:
        condition: service_healthy
      charitypay-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (React + Vite)
  charitypay-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: charitypay-frontend
    restart: unless-stopped
    ports:
      - "5174:3000"
    environment:
      - VITE_API_URL=http://localhost:8081/api/v1
    volumes:
      - ./frontend/src:/app/src:cached
      - ./frontend/public:/app/public:cached
      - ./frontend/index.html:/app/index.html:cached
      - ./frontend/vite.config.js:/app/vite.config.js:cached
      - /app/node_modules
    networks:
      - charitypay-network
    depends_on:
      - charitypay-api

  # Nginx Reverse Proxy
  charitypay-nginx:
    image: nginx:alpine
    container_name: charitypay-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - app_uploads:/var/www/uploads:ro
    networks:
      - charitypay-network
    depends_on:
      - charitypay-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Monitoring)
  charitypay-prometheus:
    image: prom/prometheus:latest
    container_name: charitypay-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - charitypay-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (Analytics Dashboard)
  charitypay-grafana:
    image: grafana/grafana:latest
    container_name: charitypay-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_USER:-admin}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD:-admin123}"
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - charitypay-network
    depends_on:
      - charitypay-prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  charitypay-network:
    driver: bridge