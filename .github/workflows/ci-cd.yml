name: CharityPay .NET CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  # ============================================================================
  # Backend Tests and Build
  # ============================================================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_USER: postgres
          POSTGRES_DB: charitypay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results \
          --logger "trx;LogFileName=test-results.trx" \
          --filter "Category!=Integration&Category!=E2E"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=charitypay_test;Username=postgres;Password=test_password_123"

    - name: Run integration tests
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results \
          --logger "trx;LogFileName=integration-test-results.trx" \
          --filter "Category=Integration"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=charitypay_test;Username=postgres;Password=test_password_123"
        RedisSettings__ConnectionString: "localhost:6379"

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          "-reports:test-results/**/coverage.cobertura.xml" \
          "-targetdir:coverage" \
          "-reporttypes:Html;Cobertura;JsonSummary"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/Cobertura.xml
        flags: backend
        name: backend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          test-results/
          coverage/

  # ============================================================================
  # Frontend Tests and Build
  # ============================================================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/cobertura-coverage.xml
        flags: frontend
        name: frontend-coverage

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/

  # ============================================================================
  # Security and Quality Checks
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: csharp, javascript

    - name: Build for CodeQL
      run: dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ============================================================================
  # Docker Build and Push
  # ============================================================================
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: charitypay/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ============================================================================
  # End-to-End Tests
  # ============================================================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.dev.yml up -d
        sleep 30  # Wait for services to be ready

    - name: Install Playwright
      working-directory: ./frontend
      run: |
        npm ci
        npx playwright install

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:5173

    - name: Upload E2E results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results
        path: |
          frontend/test-results/
          frontend/playwright-report/

    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.dev.yml down

  # ============================================================================
  # Deploy to Development
  # ============================================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to development environment
      run: |
        echo "🚀 Deploying to development environment..."
        # In a real scenario, this would deploy to your dev infrastructure
        echo "✅ Development deployment completed"

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "🚀 Deploying to staging environment..."
        # In a real scenario, this would deploy to your staging infrastructure
        echo "✅ Staging deployment completed"

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "🚀 Deploying to production environment..."
        # In a real scenario, this would deploy to your production infrastructure
        echo "✅ Production deployment completed"

  # ============================================================================
  # Notification
  # ============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: always()

    steps:
    - name: Notify success
      if: needs.backend-test.result == 'success' && needs.frontend-test.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        
    - name: Notify failure
      if: needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure'
      run: |
        echo "❌ Some tests failed. Please check the logs."
        exit 1